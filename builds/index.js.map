{"version":3,"file":"index.js","sources":["../src/parser.js","../src/index.js"],"sourcesContent":["export class RugParser {\n  constructor(options = {}) {\n    this.result = [];\n    this.currentIndentLevel = 0;\n    this.options = {\n      ...options\n    };\n  }\n\n  parse(input) {\n    const lines = input.split('\\n');\n    let buffer = [];\n    let indentStack = []; // Stack to track nested divs\n    let currentNestLevel = 0;\n\n    for (let i = 0; i < lines.length; i++) {\n      const line = lines[i];\n      const indent = this.getIndentLevel(line);\n      const trimmedLine = line.trim();\n\n      // Skip empty lines\n      if (!trimmedLine) {\n        if (buffer.length) {\n          this.processParagraphs(buffer);\n          buffer = [];\n        }\n        // Add empty line to maintain spacing\n        this.result.push('');\n        continue;\n      }\n\n      // Updated condition to include lines starting with :\n      if (trimmedLine.startsWith('.') || trimmedLine.startsWith('#') || trimmedLine.startsWith(':')) {\n        if (buffer.length) {\n          this.processParagraphs(buffer);\n          buffer = [];\n        }\n\n        // Close any divs that are ending based on indent\n        while (indentStack.length > 0 && indent <= indentStack[indentStack.length - 1].indent) {\n          this.result.push(indentStack.pop().closeTag);\n        }\n\n        const { openTag, closeTag, content } = this.parseClassLine(trimmedLine);\n\n        this.result.push(`${openTag}${content}`);\n        indentStack.push({ indent, closeTag });\n        continue;\n      }\n\n      // Handle indented content under a class-based div\n      if (indent > 0 && indentStack.length > 0) {\n        if (indent > indentStack[indentStack.length - 1].indent) {\n          // Preserve the line as-is, don't trim\n          this.result.push(line.slice(indent));\n          continue;\n        }\n      }\n\n      // Handle HTML passthrough\n      if (trimmedLine.includes('<')) {\n        if (buffer.length) {\n          this.processParagraphs(buffer);\n          buffer = [];\n        }\n        this.result.push(line);\n        continue;\n      }\n\n      // Accumulate plain text lines\n      buffer.push(line);\n    }\n\n    // Process any remaining text in buffer\n    if (buffer.length) {\n      this.processParagraphs(buffer);\n    }\n\n    // Close any remaining open divs\n    while (indentStack.length > 0) {\n      this.result.push(indentStack.pop().closeTag);\n    }\n\n    // Wrap the entire result in a pre-wrap div, without pretty printing\n    const innerResult = this.result.join('\\n');\n    return `<div style=\"white-space: pre-wrap\">\\n${innerResult}\\n</div>`;\n  }\n\n  getIndentLevel(line) {\n    const match = line.match(/^(\\s*)/);\n    return match ? match[1].length : 0;\n  }\n\n  parseClassLine(line) {\n    const parts = line.trim().split(' ');\n    const firstPart = parts[0];\n    const content = parts.slice(1).join(' ');\n\n    const attrs = {\n      tag: 'span',\n      classes: [],\n      id: null,\n      attributes: {}\n    };\n\n    // Check if line starts with a tag name\n    if (/^[a-zA-Z][a-zA-Z0-9]*(?:[.#:]|$)/.test(firstPart)) {\n      const tagMatch = firstPart.match(/^[a-zA-Z][a-zA-Z0-9]*/);\n      if (tagMatch) {\n        attrs.tag = tagMatch[0];\n        firstPart = firstPart.slice(tagMatch[0].length);\n      }\n    }\n\n    // If remaining firstPart starts with :, treat it as an attribute-only element\n    if (firstPart.startsWith(':')) {\n      const elementParts = firstPart.match(/:[^=\\s]+(?:=(?:[^\"'\\s]+|[\"'][^\"']*[\"']))?/g) || [];\n      for (const part of elementParts) {\n        const hasEquals = part.includes('=');\n        if (hasEquals) {\n          const [name, ...valueParts] = part.slice(1).split('=');\n          const value = valueParts.join('=').replace(/^[\"']|[\"']$/g, '');\n          attrs.attributes[name] = value;\n        } else {\n          const name = part.slice(1);\n          attrs.attributes[name] = '';\n        }\n      }\n    } else {\n      const elementParts = firstPart.match(/([.#][^.#:]+|:[^=\\s]+(?:=(?:[^\"'\\s]+|[\"'][^\"']*[\"']))?)/g) || [];\n      for (const part of elementParts) {\n        if (part.startsWith('.')) {\n          attrs.classes.push(part.slice(1));\n        } else if (part.startsWith('#')) {\n          attrs.id = part.slice(1);\n        } else if (part.startsWith(':')) {\n          const hasEquals = part.includes('=');\n          if (hasEquals) {\n            const [name, ...valueParts] = part.slice(1).split('=');\n            const value = valueParts.join('=').replace(/^[\"']|[\"']$/g, '');\n            attrs.attributes[name] = value;\n          } else {\n            const name = part.slice(1);\n            attrs.attributes[name] = '';\n          }\n        }\n      }\n    }\n\n    let tag = `<${attrs.tag}`;\n\n    if (attrs.classes.length > 0) {\n      tag += ` class=\"${attrs.classes.join(' ')}\"`;\n    }\n\n    if (attrs.id) {\n      tag += ` id=\"${attrs.id}\"`;\n    }\n\n    for (const [name, value] of Object.entries(attrs.attributes)) {\n      tag += value === '' ? ` ${name}` : ` ${name}=\"${value}\"`;\n    }\n\n    tag += '>';\n\n    return {\n      openTag: tag,\n      closeTag: `</${attrs.tag}>`,\n      content\n    };\n  }\n\n  processParagraphs(lines) {\n    // Simply join the lines with newlines, no <p> tags needed\n    if (lines.length) {\n      this.result.push(lines.join('\\n'));\n    }\n  }\n} ","import { RugParser } from './parser.js';\n\nfunction parseRug(input, options = {}) {\n  const parser = new RugParser(options);\n  return parser.parse(input);\n}\n\nexport default parseRug; "],"names":["RugParser","constructor","options","this","result","currentIndentLevel","parse","input","lines","split","buffer","indentStack","i","length","line","indent","getIndentLevel","trimmedLine","trim","startsWith","processParagraphs","push","pop","closeTag","openTag","content","parseClassLine","slice","includes","join","match","parts","firstPart","attrs","tag","classes","id","attributes","test","tagMatch","elementParts","part","name","valueParts","value","replace","Object","entries"],"mappings":"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"}