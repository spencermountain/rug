!function(s,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(s="undefined"!=typeof globalThis?globalThis:s||self).parseRug=t()}(this,(function(){"use strict";class s{constructor(s={}){this.result=[],this.currentIndentLevel=0,this.options={...s}}parse(s){const t=s.split("\n");let e=[],i=[];for(let s=0;s<t.length;s++){const n=t[s],l=this.getIndentLevel(n),r=n.trim();if(r)if(r.startsWith(".")||r.startsWith("#")||r.startsWith(":")){for(e.length&&(this.processParagraphs(e),e=[]);i.length>0&&l<=i[i.length-1].indent;)this.result.push(i.pop().closeTag);const{openTag:s,closeTag:t,content:n}=this.parseClassLine(r);this.result.push(`${s}${n}`),i.push({indent:l,closeTag:t})}else l>0&&i.length>0&&l>i[i.length-1].indent?this.result.push(n.slice(l)):r.includes("<")?(e.length&&(this.processParagraphs(e),e=[]),this.result.push(n)):e.push(n);else e.length&&(this.processParagraphs(e),e=[]),this.result.push("")}for(e.length&&this.processParagraphs(e);i.length>0;)this.result.push(i.pop().closeTag);return`<div style="white-space: pre-wrap">\n${this.result.join("\n")}\n</div>`}getIndentLevel(s){const t=s.match(/^(\s*)/);return t?t[1].length:0}parseClassLine(s){const t=s.trim().split(" "),e=t[0],i=t.slice(1).join(" "),n={tag:"span",classes:[],id:null,attributes:{}};if(/^[a-zA-Z][a-zA-Z0-9]*(?:[.#:]|$)/.test(e)){const s=e.match(/^[a-zA-Z][a-zA-Z0-9]*/);s&&(n.tag=s[0],e=e.slice(s[0].length))}if(e.startsWith(":")){const s=e.match(/:[^=\s]+(?:=(?:[^"'\s]+|["'][^"']*["']))?/g)||[];for(const t of s){if(t.includes("=")){const[s,...e]=t.slice(1).split("="),i=e.join("=").replace(/^["']|["']$/g,"");n.attributes[s]=i}else{const s=t.slice(1);n.attributes[s]=""}}}else{const s=e.match(/([.#][^.#:]+|:[^=\s]+(?:=(?:[^"'\s]+|["'][^"']*["']))?)/g)||[];for(const t of s)if(t.startsWith("."))n.classes.push(t.slice(1));else if(t.startsWith("#"))n.id=t.slice(1);else if(t.startsWith(":")){if(t.includes("=")){const[s,...e]=t.slice(1).split("="),i=e.join("=").replace(/^["']|["']$/g,"");n.attributes[s]=i}else{const s=t.slice(1);n.attributes[s]=""}}}let l=`<${n.tag}`;n.classes.length>0&&(l+=` class="${n.classes.join(" ")}"`),n.id&&(l+=` id="${n.id}"`);for(const[s,t]of Object.entries(n.attributes))l+=""===t?` ${s}`:` ${s}="${t}"`;return l+=">",{openTag:l,closeTag:`</${n.tag}>`,content:i}}processParagraphs(s){s.length&&this.result.push(s.join("\n"))}}return function(t,e={}){return new s(e).parse(t)}}));
//# sourceMappingURL=index.js.map
